@page "/Details/{beerId}"
@*@attribute [ComponentRenderMode(WebComponentRenderMode.Server)]*@
@inject IBrewerService brewerService

@if (Beer == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PageTitle>@Beer.Name</PageTitle>
    <h1>@Beer.Name</h1>
    <div class="row">
        <div class="col-2">
            <img src="@Beer.ImageUrl" alt="@Beer.Name" class="img-fluid float-start" style="max-height: 500px;" />
        </div>
        <div class="col">
            <h2>@Beer.Tagline</h2>
            <p>
                @Beer.Description
            </p>
            <hr />
            <p>
                Alcohol <strong>@Beer.Abv %</strong><br />
                First brewed: <strong>@Beer.FirstBrewed</strong>
            </p>
            @if (!string.IsNullOrWhiteSpace(Beer.BrewersTips))
            {
                <h5>Tips</h5>
                <p>
                    @Beer.BrewersTips
                </p>
            }
            @if (Beer.FoodPairing.Length > 0)
            {
                <h5>Food pairing</h5>
                <ul>
                    @foreach (var item in Beer.FoodPairing)
                    {
                        <li>@item</li>
                    }
                </ul>
            }
        </div>
    </div>

    <StarRatingReviewsSSR Reviews="Reviews" OnSubmitReview="OnSubmitReview" />
   @* <StarRatingReviews Reviews="Reviews" OnSubmitReview="OnSubmitReview" />*@

}

@code {
    [Parameter, EditorRequired]
    public string BeerId { get; set; } = default!;

    public Beer? Beer { get; set; }

    private List<Review> Reviews { get; set; } = new List<Review>();


    protected override async Task OnParametersSetAsync()
    {
        if (int.TryParse(BeerId, out var id))
            Beer = await brewerService.GetBeerAsync(id);
    }

    Task OnSubmitReview(Review review)
    {
        Reviews.Insert(0, review);
        StateHasChanged();
        return Task.CompletedTask;
    }
}
